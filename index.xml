<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>injuryzy 的博客</title><link>/</link><description>Recent content on injuryzy 的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 28 Jun 2024 11:42:05 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>/posts/2014/09/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>/posts/2014/09/creating-a-new-theme/</guid><description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Flutter的provider</title><link>/posts/2024/06/flutter%E7%9A%84provider/</link><pubDate>Fri, 28 Jun 2024 11:42:05 +0800</pubDate><guid>/posts/2024/06/flutter%E7%9A%84provider/</guid><description>背景 在类似 Flutter 的声明式框架中，如果你想要修改 UI，那么你需要重构它。所以数据要存储在widget树中的widget上层，
缺点：
容易出现bug 重新构建widget性能差 provider 幸运的是 Flutter 在 widget 中存在一种机制，能够为其子孙节点提供数据和服务。换言之，不仅仅是它的子节点，所有在它下层的 widget 都可以。
ChangeNotifier ChangeNotifier 用于向监听器发送通知，如果定义为ChangeNotifier ,可以订阅他的变化 ，需要给改ui的时候可以调用 notifyListeners()方法；
ChangeNotifierProvider ChangeNotifierProvider 放在需要监听的weiget 的上层，可以向其子孙节点暴露 ChangeNotifier
Consumer CartModel 已经通过 ChangeNotifierProvider 在应用中与 widget 相关联
##连接 flutter provider</description></item><item><title>OSS客户端STS上传</title><link>/posts/2024/06/oss%E5%AE%A2%E6%88%B7%E7%AB%AFsts%E4%B8%8A%E4%BC%A0/</link><pubDate>Wed, 19 Jun 2024 11:26:12 +0800</pubDate><guid>/posts/2024/06/oss%E5%AE%A2%E6%88%B7%E7%AB%AFsts%E4%B8%8A%E4%BC%A0/</guid><description>我们为什么要使用客户端上传 阿里云官方给出的解释:
在典型的服务端和客户端架构下，常见的文件上传方式是服务端代理上传：客户端将文件上传到业务服务器，然后业务服务器将文件上传到OSS。在这个过程中，一份数据需要在网络上传输两次，会造成网络资源的浪费，增加服务端的资源开销。为了解决这一问题，您可以在客户端直连OSS来完成文件上传，无需经过业务服务器中转。 客户端上传的原理 注意事项
由于客户端上传是post请求,在oss控制台里面的跨域设置里面要把post方法加入
代码案例，点击跳转
上传回调 在传中我们需要完成上传后告知服务器，需要设置一个函数给，请求告知服务器
流程介绍 实例代码 代码案例</description></item><item><title>go_zero的API签名验证</title><link>/posts/2024/06/go_zero%E7%9A%84api%E7%AD%BE%E5%90%8D%E9%AA%8C%E8%AF%81/</link><pubDate>Tue, 04 Jun 2024 10:03:42 +0800</pubDate><guid>/posts/2024/06/go_zero%E7%9A%84api%E7%AD%BE%E5%90%8D%E9%AA%8C%E8%AF%81/</guid><description>背景 最近在使用go_zero框架的时候，想给api加一个签名，但是搜索了一下，没有发现很完整的教程，所以在这里记录一下。最开始通过一些博客加了一下签名，在框架验签的时候，发现签名失败，所以我们从验签开始往回推。
go_zero验签 我们从这两个方法讲起来
ParseContentSecurity func ParseContentSecurity(decrypters map[string]codec.RsaDecrypter, r *http.Request) ( *ContentSecurityHeader, error) { // 获取请求头中的X-Content-Security字段 contentSecurity := r.Header.Get(httpx.ContentSecurity) //X-Content-Security attrs := httpx.ParseHeader(contentSecurity) // 获取请求头中的X-Content-Security字段中的key、secret、signature字段 fingerprint := attrs[httpx.KeyField] //&amp;#34;key&amp;#34; secret := attrs[httpx.SecretField] //&amp;#34;secret&amp;#34; signature := attrs[signatureField] //&amp;#34;signatur&amp;#34; if len(fingerprint) == 0 || len(secret) == 0 || len(signature) == 0 { return nil, ErrInvalidHeader } decrypter, ok := decrypters[fingerprint] if !ok { return nil, ErrInvalidPublicKey } // 解密secret decryptedSecret, err := decrypter.</description></item><item><title>Création d'un nouveau thème</title><link>/posts/2014/09/cr%C3%A9ation-dun-nouveau-th%C3%A8me/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>/posts/2014/09/cr%C3%A9ation-dun-nouveau-th%C3%A8me/</guid><description>Introduction Ce tutoriel vous montrera comment créer un thème simple pour Hugo. Je suppose que vous êtes familier avec HTML, la ligne de commande bash, et que vous êtes à l&amp;rsquo;aise avec Markdown pour formater le contenu. Je vais expliquer comment Hugo utilise des modèles et comment vous pouvez organiser vos modèles pour créer un thème. Je ne couvrirai pas l&amp;rsquo;utilisation de CSS pour styliser votre thème.
Nous allons commencer par créer un nouveau site avec un modèle très basique.</description></item><item><title>关于我自己</title><link>/about/</link><pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate><guid>/about/</guid><description>Hugo is the world’s fastest framework for building websites. It is written in Go.
It makes use of a variety of open source projects including:
https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Learn more and contribute on GitHub.</description></item><item><title>(Hu)go Template Primer</title><link>/posts/2014/04/hugo-template-primer/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>/posts/2014/04/hugo-template-primer/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Débuter avec Hugo</title><link>/posts/2014/04/d%C3%A9buter-avec-hugo/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>/posts/2014/04/d%C3%A9buter-avec-hugo/</guid><description>&lt;h2 id="étape-1-installer-hugo">Étape 1. Installer Hugo&lt;/h2>
&lt;p>Allez sur la page de téléchargements de
&lt;a href="https://github.com/spf13/hugo/releases">hugo&lt;/a> et téléchargez la version
appropriée à votre système d&amp;rsquo;exploitation et votre architecture.&lt;/p>
&lt;p>Sauvegardez le fichier téléchargé à un endroit précis, afin de l&amp;rsquo;utiliser dans
l&amp;rsquo;étape suivante.&lt;/p>
&lt;p>Des informations plus complètes sont disponibles sur la page
&lt;a href="/overview/installing/">installing hugo&lt;/a>&lt;/p></description></item><item><title>Getting Started with Hugo</title><link>/posts/2014/04/getting-started-with-hugo/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>/posts/2014/04/getting-started-with-hugo/</guid><description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:</description></item><item><title>Introduction aux modèles (Hu)go</title><link>/posts/2014/04/introduction-aux-mod%C3%A8les-hugo/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>/posts/2014/04/introduction-aux-mod%C3%A8les-hugo/</guid><description>Hugo utilise l&amp;rsquo;excellente librairie go html/template pour son moteur de modèles. c&amp;rsquo;est un moteur extrêmement léger qui offre un très petit nombre de fonctions logiques. À notre expérience, c&amp;rsquo;est juste ce qu&amp;rsquo;il faut pour créer un bon site web statique. Si vous avez déjà utilisé d&amp;rsquo;autre moteurs de modèles pour différents langages ou frameworks, vous allez retrouver beaucoup de similitudes avec les modèles go.
Ce document est une introduction sur l&amp;rsquo;utilisation de Go templates.</description></item></channel></rss>