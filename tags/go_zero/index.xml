<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go_zero on injuryzy 的博客</title>
    <link>http://localhost:1313/tags/go_zero/</link>
    <description>Recent content in Go_zero on injuryzy 的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 04 Jun 2024 10:03:42 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/go_zero/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go_zero的API签名验证</title>
      <link>http://localhost:1313/posts/2024/06/go_zero%E7%9A%84api%E7%AD%BE%E5%90%8D%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Tue, 04 Jun 2024 10:03:42 +0800</pubDate>
      <guid>http://localhost:1313/posts/2024/06/go_zero%E7%9A%84api%E7%AD%BE%E5%90%8D%E9%AA%8C%E8%AF%81/</guid>
      <description>背景 最近在使用go_zero框架的时候，想给api加一个签名，但是搜索了一下，没有发现很完整的教程，所以在这里记录一下。最开始通过一些博客加了一下签名，在框架验签的时候，发现签名失败，所以我们从验签开始往回推。&#xA;go_zero验签 我们从这两个方法讲起来&#xA;ParseContentSecurity func ParseContentSecurity(decrypters map[string]codec.RsaDecrypter, r *http.Request) ( *ContentSecurityHeader, error) { // 获取请求头中的X-Content-Security字段 contentSecurity := r.Header.Get(httpx.ContentSecurity) //X-Content-Security attrs := httpx.ParseHeader(contentSecurity) // 获取请求头中的X-Content-Security字段中的key、secret、signature字段 fingerprint := attrs[httpx.KeyField] //&amp;#34;key&amp;#34; secret := attrs[httpx.SecretField] //&amp;#34;secret&amp;#34; signature := attrs[signatureField] //&amp;#34;signatur&amp;#34; if len(fingerprint) == 0 || len(secret) == 0 || len(signature) == 0 { return nil, ErrInvalidHeader } decrypter, ok := decrypters[fingerprint] if !ok { return nil, ErrInvalidPublicKey } // 解密secret decryptedSecret, err := decrypter.</description>
    </item>
  </channel>
</rss>
